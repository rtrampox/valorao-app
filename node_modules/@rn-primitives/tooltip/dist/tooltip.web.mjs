'use client'
import {
  __objRest,
  __spreadValues
} from "./chunk-X44HCPWV.mjs";

// src/tooltip.web.tsx
import * as Tooltip from "@radix-ui/react-tooltip";
import { useAugmentedRef } from "@rn-primitives/hooks";
import * as Slot from "@rn-primitives/slot";
import * as React from "react";
import { Pressable as Pressable2, View as View2 } from "react-native";
var RootContext = React.createContext(null);
var Root2 = React.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      asChild,
      delayDuration,
      skipDelayDuration,
      disableHoverableContent,
      onOpenChange: onOpenChangeProp
    } = _b, viewProps = __objRest(_b, [
      "asChild",
      "delayDuration",
      "skipDelayDuration",
      "disableHoverableContent",
      "onOpenChange"
    ]);
    const [open, setOpen] = React.useState(false);
    function onOpenChange(value) {
      setOpen(value);
      onOpenChangeProp == null ? void 0 : onOpenChangeProp(value);
    }
    const Component = asChild ? Slot.View : View2;
    return /* @__PURE__ */ React.createElement(RootContext.Provider, { value: { open, onOpenChange } }, /* @__PURE__ */ React.createElement(
      Tooltip.Provider,
      {
        delayDuration,
        skipDelayDuration,
        disableHoverableContent
      },
      /* @__PURE__ */ React.createElement(
        Tooltip.Root,
        {
          open,
          onOpenChange,
          delayDuration,
          disableHoverableContent
        },
        /* @__PURE__ */ React.createElement(Component, __spreadValues({ ref }, viewProps))
      )
    ));
  }
);
Root2.displayName = "RootWebTooltip";
function useTooltipContext() {
  const context = React.useContext(RootContext);
  if (!context) {
    throw new Error("Tooltip compound components cannot be rendered outside the Tooltip component");
  }
  return context;
}
var Trigger2 = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { asChild, onPress: onPressProp, role: _role, disabled } = _b, props = __objRest(_b, ["asChild", "onPress", "role", "disabled"]);
    const { onOpenChange, open } = useTooltipContext();
    const augmentedRef = useAugmentedRef({
      ref,
      methods: {
        open() {
          onOpenChange(true);
        },
        close() {
          onOpenChange(false);
        }
      }
    });
    function onPress(ev) {
      if (onPressProp) {
        onPressProp(ev);
      }
      onOpenChange(!open);
    }
    React.useLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = open ? "open" : "closed";
        augRef.type = "button";
      }
    }, [open]);
    const Component = asChild ? Slot.Pressable : Pressable2;
    return /* @__PURE__ */ React.createElement(Tooltip.Trigger, { disabled: disabled != null ? disabled : void 0, asChild: true }, /* @__PURE__ */ React.createElement(
      Component,
      __spreadValues({
        ref: augmentedRef,
        onPress,
        role: "button",
        disabled
      }, props)
    ));
  }
);
Trigger2.displayName = "TriggerWebTooltip";
function Portal2({ forceMount, container, children }) {
  return /* @__PURE__ */ React.createElement(Tooltip.Portal, { forceMount, children, container });
}
var Overlay = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { asChild, forceMount } = _b, props = __objRest(_b, ["asChild", "forceMount"]);
    const Component = asChild ? Slot.Pressable : Pressable2;
    return /* @__PURE__ */ React.createElement(Component, __spreadValues({ ref }, props));
  }
);
Overlay.displayName = "OverlayWebTooltip";
var Content2 = React.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      asChild = false,
      forceMount,
      align = "center",
      side = "top",
      sideOffset = 0,
      alignOffset = 0,
      avoidCollisions = true,
      insets: _insets,
      disablePositioningStyle: _disablePositioningStyle,
      onCloseAutoFocus: _onCloseAutoFocus,
      onEscapeKeyDown,
      onInteractOutside: _onInteractOutside,
      onPointerDownOutside,
      sticky,
      hideWhenDetached
    } = _b, props = __objRest(_b, [
      "asChild",
      "forceMount",
      "align",
      "side",
      "sideOffset",
      "alignOffset",
      "avoidCollisions",
      "insets",
      "disablePositioningStyle",
      "onCloseAutoFocus",
      "onEscapeKeyDown",
      "onInteractOutside",
      "onPointerDownOutside",
      "sticky",
      "hideWhenDetached"
    ]);
    const Component = asChild ? Slot.View : View2;
    return /* @__PURE__ */ React.createElement(
      Tooltip.Content,
      {
        onEscapeKeyDown,
        onPointerDownOutside,
        forceMount,
        align,
        side,
        sideOffset,
        alignOffset,
        avoidCollisions,
        sticky,
        hideWhenDetached
      },
      /* @__PURE__ */ React.createElement(Component, __spreadValues({ ref }, props))
    );
  }
);
Content2.displayName = "ContentWebTooltip";
export {
  Content2 as Content,
  Overlay,
  Portal2 as Portal,
  Root2 as Root,
  Trigger2 as Trigger
};
