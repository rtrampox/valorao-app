'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/tooltip.web.tsx
var tooltip_web_exports = {};
__export(tooltip_web_exports, {
  Content: () => Content2,
  Overlay: () => Overlay,
  Portal: () => Portal2,
  Root: () => Root2,
  Trigger: () => Trigger2
});
module.exports = __toCommonJS(tooltip_web_exports);
var Tooltip = __toESM(require("@radix-ui/react-tooltip"));
var import_hooks = require("@rn-primitives/hooks");
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var RootContext = React.createContext(null);
var Root2 = React.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      asChild,
      delayDuration,
      skipDelayDuration,
      disableHoverableContent,
      onOpenChange: onOpenChangeProp
    } = _b, viewProps = __objRest(_b, [
      "asChild",
      "delayDuration",
      "skipDelayDuration",
      "disableHoverableContent",
      "onOpenChange"
    ]);
    const [open, setOpen] = React.useState(false);
    function onOpenChange(value) {
      setOpen(value);
      onOpenChangeProp == null ? void 0 : onOpenChangeProp(value);
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return /* @__PURE__ */ React.createElement(RootContext.Provider, { value: { open, onOpenChange } }, /* @__PURE__ */ React.createElement(
      Tooltip.Provider,
      {
        delayDuration,
        skipDelayDuration,
        disableHoverableContent
      },
      /* @__PURE__ */ React.createElement(
        Tooltip.Root,
        {
          open,
          onOpenChange,
          delayDuration,
          disableHoverableContent
        },
        /* @__PURE__ */ React.createElement(Component, __spreadValues({ ref }, viewProps))
      )
    ));
  }
);
Root2.displayName = "RootWebTooltip";
function useTooltipContext() {
  const context = React.useContext(RootContext);
  if (!context) {
    throw new Error("Tooltip compound components cannot be rendered outside the Tooltip component");
  }
  return context;
}
var Trigger2 = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { asChild, onPress: onPressProp, role: _role, disabled } = _b, props = __objRest(_b, ["asChild", "onPress", "role", "disabled"]);
    const { onOpenChange, open } = useTooltipContext();
    const augmentedRef = (0, import_hooks.useAugmentedRef)({
      ref,
      methods: {
        open() {
          onOpenChange(true);
        },
        close() {
          onOpenChange(false);
        }
      }
    });
    function onPress(ev) {
      if (onPressProp) {
        onPressProp(ev);
      }
      onOpenChange(!open);
    }
    React.useLayoutEffect(() => {
      if (augmentedRef.current) {
        const augRef = augmentedRef.current;
        augRef.dataset.state = open ? "open" : "closed";
        augRef.type = "button";
      }
    }, [open]);
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return /* @__PURE__ */ React.createElement(Tooltip.Trigger, { disabled: disabled != null ? disabled : void 0, asChild: true }, /* @__PURE__ */ React.createElement(
      Component,
      __spreadValues({
        ref: augmentedRef,
        onPress,
        role: "button",
        disabled
      }, props)
    ));
  }
);
Trigger2.displayName = "TriggerWebTooltip";
function Portal2({ forceMount, container, children }) {
  return /* @__PURE__ */ React.createElement(Tooltip.Portal, { forceMount, children, container });
}
var Overlay = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { asChild, forceMount } = _b, props = __objRest(_b, ["asChild", "forceMount"]);
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return /* @__PURE__ */ React.createElement(Component, __spreadValues({ ref }, props));
  }
);
Overlay.displayName = "OverlayWebTooltip";
var Content2 = React.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      asChild = false,
      forceMount,
      align = "center",
      side = "top",
      sideOffset = 0,
      alignOffset = 0,
      avoidCollisions = true,
      insets: _insets,
      disablePositioningStyle: _disablePositioningStyle,
      onCloseAutoFocus: _onCloseAutoFocus,
      onEscapeKeyDown,
      onInteractOutside: _onInteractOutside,
      onPointerDownOutside,
      sticky,
      hideWhenDetached
    } = _b, props = __objRest(_b, [
      "asChild",
      "forceMount",
      "align",
      "side",
      "sideOffset",
      "alignOffset",
      "avoidCollisions",
      "insets",
      "disablePositioningStyle",
      "onCloseAutoFocus",
      "onEscapeKeyDown",
      "onInteractOutside",
      "onPointerDownOutside",
      "sticky",
      "hideWhenDetached"
    ]);
    const Component = asChild ? Slot.View : import_react_native.View;
    return /* @__PURE__ */ React.createElement(
      Tooltip.Content,
      {
        onEscapeKeyDown,
        onPointerDownOutside,
        forceMount,
        align,
        side,
        sideOffset,
        alignOffset,
        avoidCollisions,
        sticky,
        hideWhenDetached
      },
      /* @__PURE__ */ React.createElement(Component, __spreadValues({ ref }, props))
    );
  }
);
Content2.displayName = "ContentWebTooltip";
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Content,
  Overlay,
  Portal,
  Root,
  Trigger
});
