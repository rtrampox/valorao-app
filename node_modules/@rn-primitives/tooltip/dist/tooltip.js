'use client'
"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/tooltip.tsx
var tooltip_exports = {};
__export(tooltip_exports, {
  Content: () => Content,
  Overlay: () => Overlay,
  Portal: () => Portal,
  Root: () => Root,
  Trigger: () => Trigger
});
module.exports = __toCommonJS(tooltip_exports);
var import_hooks = require("@rn-primitives/hooks");
var import_portal = require("@rn-primitives/portal");
var Slot = __toESM(require("@rn-primitives/slot"));
var React = __toESM(require("react"));
var import_react_native = require("react-native");
var RootContext = React.createContext(null);
var Root = React.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      asChild,
      delayDuration: _delayDuration,
      skipDelayDuration: _skipDelayDuration,
      disableHoverableContent: _disableHoverableContent,
      onOpenChange: onOpenChangeProp
    } = _b, viewProps = __objRest(_b, [
      "asChild",
      "delayDuration",
      "skipDelayDuration",
      "disableHoverableContent",
      "onOpenChange"
    ]);
    const nativeID = React.useId();
    const [triggerPosition, setTriggerPosition] = React.useState(null);
    const [contentLayout, setContentLayout] = React.useState(null);
    const [open, setOpen] = React.useState(false);
    function onOpenChange(value) {
      setOpen(value);
      onOpenChangeProp == null ? void 0 : onOpenChangeProp(value);
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return /* @__PURE__ */ React.createElement(
      RootContext.Provider,
      {
        value: {
          open,
          onOpenChange,
          contentLayout,
          nativeID,
          setContentLayout,
          setTriggerPosition,
          triggerPosition
        }
      },
      /* @__PURE__ */ React.createElement(Component, __spreadValues({ ref }, viewProps))
    );
  }
);
Root.displayName = "RootNativeTooltip";
function useTooltipContext() {
  const context = React.useContext(RootContext);
  if (!context) {
    throw new Error("Tooltip compound components cannot be rendered outside the Tooltip component");
  }
  return context;
}
var Trigger = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { asChild, onPress: onPressProp, disabled = false } = _b, props = __objRest(_b, ["asChild", "onPress", "disabled"]);
    const { open, onOpenChange, setTriggerPosition } = useTooltipContext();
    const augmentedRef = (0, import_hooks.useAugmentedRef)({
      ref,
      methods: {
        open: () => {
          var _a2;
          onOpenChange(true);
          (_a2 = augmentedRef.current) == null ? void 0 : _a2.measure((_x, _y, width, height, pageX, pageY) => {
            setTriggerPosition({ width, pageX, pageY, height });
          });
        },
        close: () => {
          setTriggerPosition(null);
          onOpenChange(false);
        }
      }
    });
    function onPress(ev) {
      var _a2;
      if (disabled) return;
      (_a2 = augmentedRef.current) == null ? void 0 : _a2.measure((_x, _y, width, height, pageX, pageY) => {
        setTriggerPosition({ width, pageX, pageY, height });
      });
      const newValue = !open;
      onOpenChange(newValue);
      onPressProp == null ? void 0 : onPressProp(ev);
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return /* @__PURE__ */ React.createElement(
      Component,
      __spreadValues({
        ref: augmentedRef,
        "aria-disabled": disabled != null ? disabled : void 0,
        role: "button",
        onPress,
        disabled: disabled != null ? disabled : void 0
      }, props)
    );
  }
);
Trigger.displayName = "TriggerNativeTooltip";
function Portal({ forceMount, hostName, children }) {
  const value = useTooltipContext();
  if (!value.triggerPosition) {
    return null;
  }
  if (!forceMount) {
    if (!value.open) {
      return null;
    }
  }
  return /* @__PURE__ */ React.createElement(import_portal.Portal, { hostName, name: `${value.nativeID}_portal` }, /* @__PURE__ */ React.createElement(RootContext.Provider, { value }, children));
}
var Overlay = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { asChild, forceMount, onPress: OnPressProp, closeOnPress = true } = _b, props = __objRest(_b, ["asChild", "forceMount", "onPress", "closeOnPress"]);
    const { open, onOpenChange, setContentLayout, setTriggerPosition } = useTooltipContext();
    function onPress(ev) {
      if (closeOnPress) {
        setTriggerPosition(null);
        setContentLayout(null);
        onOpenChange(false);
      }
      OnPressProp == null ? void 0 : OnPressProp(ev);
    }
    if (!forceMount) {
      if (!open) {
        return null;
      }
    }
    const Component = asChild ? Slot.Pressable : import_react_native.Pressable;
    return /* @__PURE__ */ React.createElement(Component, __spreadValues({ ref, onPress }, props));
  }
);
Overlay.displayName = "OverlayNativeTooltip";
var Content = React.forwardRef(
  (_a, ref) => {
    var _b = _a, {
      asChild = false,
      forceMount,
      align = "center",
      side = "top",
      sideOffset = 0,
      alignOffset = 0,
      avoidCollisions = true,
      onLayout: onLayoutProp,
      insets,
      style,
      disablePositioningStyle
    } = _b, props = __objRest(_b, [
      "asChild",
      "forceMount",
      "align",
      "side",
      "sideOffset",
      "alignOffset",
      "avoidCollisions",
      "onLayout",
      "insets",
      "style",
      "disablePositioningStyle"
    ]);
    const {
      open,
      onOpenChange,
      nativeID,
      contentLayout,
      setContentLayout,
      setTriggerPosition,
      triggerPosition
    } = useTooltipContext();
    React.useEffect(() => {
      const backHandler = import_react_native.BackHandler.addEventListener("hardwareBackPress", () => {
        setTriggerPosition(null);
        setContentLayout(null);
        onOpenChange(false);
        return true;
      });
      return () => {
        setContentLayout(null);
        backHandler.remove();
      };
    }, []);
    const positionStyle = (0, import_hooks.useRelativePosition)({
      align,
      avoidCollisions,
      triggerPosition,
      contentLayout,
      alignOffset,
      insets,
      sideOffset,
      side,
      disablePositioningStyle
    });
    function onLayout(event) {
      setContentLayout(event.nativeEvent.layout);
      onLayoutProp == null ? void 0 : onLayoutProp(event);
    }
    if (!forceMount) {
      if (!open) {
        return null;
      }
    }
    const Component = asChild ? Slot.View : import_react_native.View;
    return /* @__PURE__ */ React.createElement(
      Component,
      __spreadValues({
        ref,
        role: "tooltip",
        nativeID,
        "aria-modal": true,
        style: [positionStyle, style],
        onLayout,
        onStartShouldSetResponder
      }, props)
    );
  }
);
Content.displayName = "ContentNativeTooltip";
function onStartShouldSetResponder() {
  return true;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Content,
  Overlay,
  Portal,
  Root,
  Trigger
});
