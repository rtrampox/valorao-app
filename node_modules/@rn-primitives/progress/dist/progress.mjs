'use client'
import {
  __objRest,
  __spreadValues
} from "./chunk-X44HCPWV.mjs";

// src/progress.tsx
import * as React from "react";
import { View } from "react-native";
import * as Slot from "@rn-primitives/slot";
var DEFAULT_MAX = 100;
var Root = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { asChild, value: valueProp, max: maxProp, getValueLabel = defaultGetValueLabel } = _b, props = __objRest(_b, ["asChild", "value", "max", "getValueLabel"]);
    const max = maxProp != null ? maxProp : DEFAULT_MAX;
    const value = isValidValueNumber(valueProp, max) ? valueProp : 0;
    const Component = asChild ? Slot.View : View;
    return /* @__PURE__ */ React.createElement(
      Component,
      __spreadValues({
        role: "progressbar",
        ref,
        "aria-valuemax": max,
        "aria-valuemin": 0,
        "aria-valuenow": value,
        "aria-valuetext": getValueLabel(value, max),
        accessibilityValue: {
          min: 0,
          max,
          now: value,
          text: getValueLabel(value, max)
        }
      }, props)
    );
  }
);
Root.displayName = "RootProgress";
var Indicator = React.forwardRef((_a, ref) => {
  var _b = _a, { asChild } = _b, props = __objRest(_b, ["asChild"]);
  const Component = asChild ? Slot.View : View;
  return /* @__PURE__ */ React.createElement(Component, __spreadValues({ ref, role: "presentation" }, props));
});
Indicator.displayName = "IndicatorProgress";
function defaultGetValueLabel(value, max) {
  return `${Math.round(value / max * 100)}%`;
}
function isValidValueNumber(value, max) {
  return typeof value === "number" && !isNaN(value) && value <= max && value >= 0;
}
export {
  Indicator,
  Root
};
