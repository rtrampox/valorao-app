'use client'
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/avatar.tsx
import * as React from "react";
import {
  Image as RNImage,
  View
} from "react-native";
import * as Slot from "@rn-primitives/slot";
var RootContext = React.createContext(null);
var Root = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { asChild, alt } = _b, viewProps = __objRest(_b, ["asChild", "alt"]);
    const [status, setStatus] = React.useState("loading");
    const Component = asChild ? Slot.View : View;
    return /* @__PURE__ */ React.createElement(RootContext.Provider, { value: { alt, status, setStatus } }, /* @__PURE__ */ React.createElement(Component, __spreadValues({ ref }, viewProps)));
  }
);
Root.displayName = "RootAvatar";
function useRootContext() {
  const context = React.useContext(RootContext);
  if (!context) {
    throw new Error("Avatar compound components cannot be rendered outside the Avatar component");
  }
  return context;
}
var Image2 = React.forwardRef(
  (_a, ref) => {
    var _b = _a, { asChild, onLoad: onLoadProps, onError: onErrorProps, onLoadingStatusChange } = _b, props = __objRest(_b, ["asChild", "onLoad", "onError", "onLoadingStatusChange"]);
    const { alt, setStatus, status } = useRootContext();
    const onLoad = React.useCallback(
      (e) => {
        setStatus("loaded");
        onLoadingStatusChange == null ? void 0 : onLoadingStatusChange("loaded");
        onLoadProps == null ? void 0 : onLoadProps(e);
      },
      [onLoadProps]
    );
    const onError = React.useCallback(
      (e) => {
        setStatus("error");
        onLoadingStatusChange == null ? void 0 : onLoadingStatusChange("error");
        onErrorProps == null ? void 0 : onErrorProps(e);
      },
      [onErrorProps]
    );
    if (status === "error") {
      return null;
    }
    const Component = asChild ? Slot.Image : RNImage;
    return /* @__PURE__ */ React.createElement(Component, __spreadValues({ ref, alt, onLoad, onError }, props));
  }
);
Image2.displayName = "ImageAvatar";
var Fallback = React.forwardRef((_a, ref) => {
  var _b = _a, { asChild } = _b, props = __objRest(_b, ["asChild"]);
  const { alt, status } = useRootContext();
  if (status !== "error") {
    return null;
  }
  const Component = asChild ? Slot.View : View;
  return /* @__PURE__ */ React.createElement(Component, __spreadValues({ ref, role: "img", "aria-label": alt }, props));
});
Fallback.displayName = "FallbackAvatar";
export {
  Fallback,
  Image2 as Image,
  Root
};
