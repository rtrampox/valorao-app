'use client'
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __objRest = (source, exclude) => {
  var target = {};
  for (var prop in source)
    if (__hasOwnProp.call(source, prop) && exclude.indexOf(prop) < 0)
      target[prop] = source[prop];
  if (source != null && __getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(source)) {
      if (exclude.indexOf(prop) < 0 && __propIsEnum.call(source, prop))
        target[prop] = source[prop];
    }
  return target;
};

// src/slot.tsx
import * as React from "react";
import {
  StyleSheet
} from "react-native";
var Pressable = React.forwardRef(
  (props, forwardedRef) => {
    const _a = props, { children } = _a, pressableSlotProps = __objRest(_a, ["children"]);
    if (!React.isValidElement(children)) {
      console.log("Slot.Pressable - Invalid asChild element", children);
      return null;
    }
    return React.cloneElement(isTextChildren(children) ? /* @__PURE__ */ React.createElement(React.Fragment, null) : children, __spreadProps(__spreadValues({}, mergeProps(pressableSlotProps, children.props)), {
      ref: forwardedRef ? composeRefs(forwardedRef, children.ref) : children.ref
    }));
  }
);
Pressable.displayName = "SlotPressable";
var View = React.forwardRef(
  (props, forwardedRef) => {
    const _a = props, { children } = _a, viewSlotProps = __objRest(_a, ["children"]);
    if (!React.isValidElement(children)) {
      console.log("Slot.View - Invalid asChild element", children);
      return null;
    }
    return React.cloneElement(isTextChildren(children) ? /* @__PURE__ */ React.createElement(React.Fragment, null) : children, __spreadProps(__spreadValues({}, mergeProps(viewSlotProps, children.props)), {
      ref: forwardedRef ? composeRefs(forwardedRef, children.ref) : children.ref
    }));
  }
);
View.displayName = "SlotView";
var Text = React.forwardRef(
  (props, forwardedRef) => {
    const _a = props, { children } = _a, textSlotProps = __objRest(_a, ["children"]);
    if (!React.isValidElement(children)) {
      console.log("Slot.Text - Invalid asChild element", children);
      return null;
    }
    return React.cloneElement(isTextChildren(children) ? /* @__PURE__ */ React.createElement(React.Fragment, null) : children, __spreadProps(__spreadValues({}, mergeProps(textSlotProps, children.props)), {
      ref: forwardedRef ? composeRefs(forwardedRef, children.ref) : children.ref
    }));
  }
);
Text.displayName = "SlotText";
var Image = React.forwardRef(
  (props, forwardedRef) => {
    const _a = props, { children } = _a, imageSlotProps = __objRest(_a, ["children"]);
    if (!React.isValidElement(children)) {
      console.log("Slot.Image - Invalid asChild element", children);
      return null;
    }
    return React.cloneElement(isTextChildren(children) ? /* @__PURE__ */ React.createElement(React.Fragment, null) : children, __spreadProps(__spreadValues({}, mergeProps(imageSlotProps, children.props)), {
      ref: forwardedRef ? composeRefs(forwardedRef, children.ref) : children.ref
    }));
  }
);
Image.displayName = "SlotImage";
function composeRefs(...refs) {
  return (node) => refs.forEach((ref) => {
    if (typeof ref === "function") {
      ref(node);
    } else if (ref != null) {
      ref.current = node;
    }
  });
}
function mergeProps(slotProps, childProps) {
  const overrideProps = __spreadValues({}, childProps);
  for (const propName in childProps) {
    const slotPropValue = slotProps[propName];
    const childPropValue = childProps[propName];
    const isHandler = /^on[A-Z]/.test(propName);
    if (isHandler) {
      if (slotPropValue && childPropValue) {
        overrideProps[propName] = (...args) => {
          childPropValue(...args);
          slotPropValue(...args);
        };
      } else if (slotPropValue) {
        overrideProps[propName] = slotPropValue;
      }
    } else if (propName === "style") {
      overrideProps[propName] = combineStyles(slotPropValue, childPropValue);
    } else if (propName === "className") {
      overrideProps[propName] = [slotPropValue, childPropValue].filter(Boolean).join(" ");
    }
  }
  return __spreadValues(__spreadValues({}, slotProps), overrideProps);
}
function combineStyles(slotStyle, childValue) {
  if (typeof slotStyle === "function" && typeof childValue === "function") {
    return (state) => {
      return StyleSheet.flatten([slotStyle(state), childValue(state)]);
    };
  }
  if (typeof slotStyle === "function") {
    return (state) => {
      return childValue ? StyleSheet.flatten([slotStyle(state), childValue]) : slotStyle(state);
    };
  }
  if (typeof childValue === "function") {
    return (state) => {
      return slotStyle ? StyleSheet.flatten([slotStyle, childValue(state)]) : childValue(state);
    };
  }
  return StyleSheet.flatten([slotStyle, childValue].filter(Boolean));
}
function isTextChildren(children) {
  return Array.isArray(children) ? children.every((child) => typeof child === "string") : typeof children === "string";
}
export {
  Image,
  Pressable,
  Text,
  View,
  isTextChildren
};
